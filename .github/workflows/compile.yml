# =====================================
# GitHub Actions Workflow: compile.yml
# Purpose: Build & export BitChat as .ipa (no tests)
# =====================================

name: Compile BitChat iOS

on:
  # Trigger workflow on push or PR to main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Allow manual triggering for testing
  workflow_dispatch:

env:
  # Global environment variables for consistency
  XCODE_VERSION: "16.4"
  XCODEGEN_VERSION: "2.43.0"
  SCHEME_NAME: "bitchat (iOS)"
  BUILD_PATH: "${{ github.workspace }}/build"

jobs:
  compile:
    name: Build BitChat IPA
    runs-on: macos-15
    timeout-minutes: 30  # Prevent hanging builds

    steps:
      # Step 1: Checkout the repo source code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for proper version info if needed
          fetch-depth: 0

      # Step 2: Setup Xcode environment with specified version
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      # Step 3: Cache XcodeGen binary to speed up builds
      - name: Cache XcodeGen
        uses: actions/cache@v4
        with:
          path: ~/.xcodegen
          key: xcodegen-${{ env.XCODEGEN_VERSION }}

      # Step 4: Validate project.yml exists
      - name: Validate project configuration
        run: |
          if [ ! -f "project.yml" ]; then
            echo "❌ Error: project.yml not found in repository root"
            exit 1
          fi
          echo "✅ project.yml found"
          
          # Show basic project info for debugging
          echo "📋 Project configuration summary:"
          head -20 project.yml

      # Step 5: Generate Xcode project from project.yml using XcodeGen
      - name: Generate Xcode project
        uses: xavierLowmiller/xcodegen-action@1.2.4
        with:
          spec: project.yml
          version: ${{ env.XCODEGEN_VERSION }}

      # Step 6: Verify the generated project and scheme
      - name: Verify Xcode project
        run: |
          # Find .xcodeproj files (proper globbing)
          XCODEPROJ_COUNT=$(find . -name "*.xcodeproj" -type d | wc -l)
          
          if [ "$XCODEPROJ_COUNT" -eq 0 ]; then
            echo "❌ Error: No .xcodeproj found after XcodeGen"
            echo "📁 Current directory contents:"
            ls -la
            exit 1
          elif [ "$XCODEPROJ_COUNT" -gt 1 ]; then
            echo "⚠️ Warning: Multiple .xcodeproj files found:"
            find . -name "*.xcodeproj" -type d
          fi
          
          # Get the first .xcodeproj file
          XCODEPROJ=$(find . -name "*.xcodeproj" -type d | head -n 1)
          echo "✅ Using Xcode project: $XCODEPROJ"
          
          # List available schemes for verification
          echo "📱 Available schemes:"
          xcodebuild -list -project "$XCODEPROJ" | grep -A 10 "Schemes:"
          
          # Verify our target scheme exists
          if ! xcodebuild -list -project "$XCODEPROJ" | grep -q "${{ env.SCHEME_NAME }}"; then
            echo "❌ Error: Scheme '${{ env.SCHEME_NAME }}' not found"
            echo "Available schemes:"
            xcodebuild -list -project "$XCODEPROJ"
            exit 1
          fi
          echo "✅ Scheme '${{ env.SCHEME_NAME }}' verified"

      # Step 7: Create build directory
      - name: Create build directory
        run: mkdir -p "${{ env.BUILD_PATH }}"

      # Step 8: Clean any previous builds
      - name: Clean build artifacts
        run: |
          xcodebuild clean \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Release

      # Step 9: Archive the app for device deployment
      - name: Archive app
        run: |
          set -o pipefail
          
          echo "🏗️ Starting archive process..."
          xcodebuild archive \
            -scheme "${{ env.SCHEME_NAME }}" \
            -sdk iphoneos \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "${{ env.BUILD_PATH }}/BitChat.xcarchive" \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty || exit 1
          
          echo "✅ Archive completed successfully"

      # Step 10: Create export options plist
      - name: Create export options
        run: |
          cat > "${{ env.BUILD_PATH }}/ExportOptions.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>release-testing</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>compileBitcode</key>
            <false/>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>destination</key>
            <string>export</string>
            <key>thinning</key>
            <string>&lt;none&gt;</string>
            <key>teamID</key>
            <string>NOTAREALTEAM</string>
            <key>iCloudContainerEnvironment</key>
            <string>Production</string>
          </dict>
          </plist>
          EOF

      # Step 11: Extract and create unsigned IPA manually
      - name: Create unsigned IPA
        run: |
          set -o pipefail
          
          echo "📦 Creating unsigned IPA from archive..."
          
          # Create IPA structure
          mkdir -p "${{ env.BUILD_PATH }}/ipa/Payload"
          
          # Find the .app bundle in the archive
          APP_PATH=$(find "${{ env.BUILD_PATH }}/BitChat.xcarchive/Products" -name "*.app" -type d | head -n 1)
          
          if [ -z "$APP_PATH" ]; then
            echo "❌ Error: No .app bundle found in archive"
            echo "📁 Archive contents:"
            find "${{ env.BUILD_PATH }}/BitChat.xcarchive" -type f -o -type d | head -20
            exit 1
          fi
          
          echo "✅ Found app bundle: $APP_PATH"
          
          # Copy app bundle to Payload directory
          cp -R "$APP_PATH" "${{ env.BUILD_PATH }}/ipa/Payload/"
          
          # Get app name for IPA filename
          APP_NAME=$(basename "$APP_PATH" .app)
          
          # Remove any existing code signatures to make it truly unsigned
          echo "🔓 Removing existing code signatures..."
          find "${{ env.BUILD_PATH }}/ipa/Payload/$APP_NAME.app" -name "_CodeSignature" -type d -exec rm -rf {} + 2>/dev/null || true
          find "${{ env.BUILD_PATH }}/ipa/Payload/$APP_NAME.app" -name "*.mobileprovision" -delete 2>/dev/null || true
          
          # Create the IPA (zip file)
          echo "📁 Creating IPA archive..."
          cd "${{ env.BUILD_PATH }}/ipa"
          zip -r "../${APP_NAME}.ipa" Payload/ -q
          
          # Verify IPA was created
          if [ -f "${{ env.BUILD_PATH }}/${APP_NAME}.ipa" ]; then
            echo "✅ Unsigned IPA created successfully"
            ls -la "${{ env.BUILD_PATH }}/${APP_NAME}.ipa"
            
            # Show IPA contents for verification
            echo "📋 IPA contents:"
            unzip -l "${{ env.BUILD_PATH }}/${APP_NAME}.ipa" | head -10
          else
            echo "❌ Error: IPA file not created"
            ls -la "${{ env.BUILD_PATH }}/"
            exit 1
          fi

      # Step 12: Get build info for artifact naming
      - name: Get build information
        id: build_info
        run: |
          # Get commit SHA (short)
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          
          # Get branch name
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          
          # Clean branch name for file naming
          CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/_/g')
          
          # Set outputs
          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "branch_name=${CLEAN_BRANCH}" >> $GITHUB_OUTPUT
          echo "artifact_name=BitChat-${CLEAN_BRANCH}-${COMMIT_SHA}" >> $GITHUB_OUTPUT

      # Step 13: Upload the IPA as a downloadable artifact
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_info.outputs.artifact_name }}
          path: ${{ env.BUILD_PATH }}/*.ipa
          retention-days: 30
          if-no-files-found: error

      # Step 14: Add build summary
      - name: Build summary
        if: always()
        run: |
          echo "## 🍎 BitChat iOS Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Build Status**: Success" >> $GITHUB_STEP_SUMMARY
            echo "📱 **Scheme**: ${{ env.SCHEME_NAME }}" >> $GITHUB_STEP_SUMMARY
            echo "🔧 **Xcode Version**: ${{ env.XCODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Artifact**: ${{ steps.build_info.outputs.artifact_name }}" >> $GITHUB_STEP_SUMMARY
            echo "🌿 **Branch**: ${{ steps.build_info.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Commit**: ${{ steps.build_info.outputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💡 **Next Steps**: Download the artifact and sideload using SideStore or similar tools." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status**: Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔍 Check the logs above for detailed error information." >> $GITHUB_STEP_SUMMARY
          fi

# ===
# ADDITIONAL NOTES:
# 
# Security Considerations:
# - This workflow creates unsigned IPAs suitable for sideloading
# - No sensitive signing certificates or provisioning profiles are used
# - Code signing is explicitly disabled for CI builds
#
# Customization Options:
# - Update XCODE_VERSION env var when new Xcode versions are released
# - Modify SCHEME_NAME if your project.yml changes
# - Adjust timeout-minutes based on your build complexity
# - Change retention-days for artifacts based on your needs
#
# Troubleshooting:
# - Check "Verify Xcode project" step output if scheme issues occur
# - Archive logs are piped through xcpretty for cleaner output
# - Build summary provides quick status overview
# - All critical paths use environment variables for consistency
#
